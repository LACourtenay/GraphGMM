% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/similarity_matrix.R
\name{similarity_matrix}
\alias{similarity_matrix}
\title{Calculate Similarity Matrix}
\usage{
similarity_matrix(landmark_configuration, method = "cosine", unravel = TRUE)
}
\arguments{
\item{landmark_configuration}{A (landmark x dimension x individuals)
array (or tensor) containing landmark coordinates}

\item{method}{The method to be used to define the similarity matrix
("cosine", "euclid" or "chebyshev").}

\item{unravel}{A boolean defining whether to turn matrices into similarity vectors}
}
\value{
similarity vectors or matrices for each individual
}
\description{
The present function can be used to calculate a similarity matrix from a given landmark
configuration.
}
\section{Description}{

Landmark configurations can be converted
into a similarity matrix, calculating the structural similarity of each landmark in
relation to all landmarks within the configuration. For this purpose, three different
similarity matrices can be calculated (Cosine, Euclidean and Chebyshev),
however optimal results (and the most recommendable
approach), is obtained using the cosine similarity function.
}

\section{Bibliography}{

Leskovec, J. (2019) Graph Node Embedding Algorithms, Stanford University CS224W:
Machine Learning with Graphs.
}

\examples{
library(shapes)
library(GraphGMM)

# load data
data(apes)

# Generalized Procrustes Fit
GPAshape <- GPA(apes$x)

# calculate central configuration
lm_similarities <- similarity_matrix(GPAshape$rotated)

pca_plot(lm_similarities, apes$group)

}
\seealso{
\code{\link{graph_embeddings}}
}
