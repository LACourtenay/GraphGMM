% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tps_visualisation.R
\name{tps_visualisation}
\alias{tps_visualisation}
\title{Thin Plate Spline - Shape Predictor}
\usage{
tps_visualisation(
  gpa_coordinates,
  pca_data,
  pcscore,
  pccoord,
  type,
  edges = NULL,
  robust = FALSE
)
}
\arguments{
\item{gpa_coordinates}{A (landmark x dimension x individuals) array (or tensor) containing
all landmark coordinates after Generalized Procrustes Analyses.}

\item{pca_data}{The PC Scores from the Principal Component Analysis}

\item{pcscore}{The PC Score(s) that will be used for shape prediction}

\item{pccoord}{The coordinates used for shape prediction}

\item{type}{The type of visualisation; 'graph' visualisation or 'surface' for 3D
surfaces.}

\item{edges}{A edge matrix used for 'graph' type visualisation}

\item{robust}{A boolean value indicating whether robust metrics will be incorporated into the
prediction of landmarks.}
}
\value{
A plotted visualisation of the predicted shape

The predicted landmark coordinates
}
\description{
The present function can be used to calculate and visualise morphological variation given
a set of Procrustes superimposed coordinates and a feature space, based on the concept
of Thin Plate Splines (Bookstein, 1989)
}
\section{Details}{

This function generates a plot of the shape or form differences for a given point
in feature space (typically PCA). Using the \code{morphological_predictor} function,
the function first calculates the landmark coordinates of the point of interest,
followed by the visualisation of these changes using either a graph or a surface plot.
}

\section{Bibliography}{

Bookstein, F.L. (1989) Principal Warps: thin plate spline and the decomposition of
deformations, Transactions on Pattern Analysis in Machine Intelligence.
11(6):567-585
}

\examples{
library(shapes)
library(GraphGMM)

# 2D example --------------------------------------

# load data
data(apes)

# Generalized Procrustes Fit
GPAshape <- GPA(apes$x)

# calculate central configuration
central_config <- calc_central_morph(GPAshape$coordinates)

# compute graph edges
edges <- triangulate2d(central_config)

# extract edge list
edge_list <- as_edge_list(edges)

# create graph embeddings
graph_object <- graph_embeddings(GPAshape$coordinates, edge_list,
                                 num_convolutions = 2)

pca <- pca_plot(graph_object$similarity_vector, apes$group)

pca$pca_plot # visualise pca_plot

# visualise pc1 extremities

tps_visualisation(GPAshape$coordinates, pca$pc_scores, pcscore = 1,
                  pccoord = max(pca$pc_scores[,1]), type = "graph",
                  edges = edges)
tps_visualisation(GPAshape$coordinates, pca$pc_scores, pcscore = 1,
                  pccoord = min(pca$pc_scores[,1]), type = "graph",
                  edges = edges)

# visualise pc2 extremities

tps_visualisation(GPAshape$coordinates, pca$pc_scores, pcscore = 2,
                  pccoord = max(pca$pc_scores[,2]), type = "graph",
                  edges = edges)
tps_visualisation(GPAshape$coordinates, pca$pc_scores, pcscore = 2,
                  pccoord = min(pca$pc_scores[,2]), type = "graph",
                  edges = edges)

# 3D example --------------------------------------

data(macf.dat)

# Generalized Procrustes Fit
GPAshape <- GPA(macf.dat)

# calculate central configuration
central_config <- calc_central_morph(GPAshape$coordinates)

# compute graph edges
edges <- triangulate3d(central_config)

# extract edge list
edge_list <- as_edge_list(edges)

# create graph embeddings
graph_object <- graph_embeddings(GPAshape$coordinates, edge_list,
                                 num_convolutions = 2)

pca <- pca_plot(graph_object$similarity_vector)

pca$pca_plot # visualise pca_plot

# visualise pc1 extremities as surface plot

tps_visualisation(GPAshape$coordinates, pca$pc_scores, pcscore = 1,
                  pccoord = max(pca$pc_scores[,1]), type = "surface")
tps_visualisation(GPAshape$coordinates, pca$pc_scores, pcscore = 1,
                  pccoord = min(pca$pc_scores[,1]), type = "surface")

# visualise pc1 extremities as graph plot

tps_visualisation(GPAshape$coordinates, pca$pc_scores, pcscore = 1,
                  pccoord = max(pca$pc_scores[,1]), type = "graph",
                  edges = edges)
tps_visualisation(GPAshape$coordinates, pca$pc_scores, pcscore = 1,
                  pccoord = min(pca$pc_scores[,1]), type = "graph",
                  edges = edges)

}
\seealso{
\code{morphological_predictor}, or \code{\link[geomorph]{shape.predictor}}
and \code{\link[geomorph]{plotRefToTarget}}
from the \code{geomorph} library
}
\author{
Lloyd A. Courtenay
}
