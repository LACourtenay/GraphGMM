% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/morphological_predictor.R
\name{morphological_predictor}
\alias{morphological_predictor}
\title{Morphological Predictor}
\usage{
morphological_predictor(
  gpa_coordinates,
  morph_descriptors,
  target_pred,
  robust = FALSE
)
}
\arguments{
\item{gpa_coordinates}{A (landmark x dimension x individuals) array (or tensor) containing
all landmark coordinates after Generalized Procrustes Analyses.}

\item{target_pred}{A vector of morphological variables that will be used to predict their corresponding
landmarks.}

\item{robust}{A boolean value indicating whether robust metrics will be incorporated into the
prediction of landmarks.}

\item{morph_descriptos}{A matrix of morphological descriptors that will be used to construct
the multivariate linear function that will be used to predict landmarks. e.g. a matrix
of PC scores.}
}
\value{
A matrix of predicted landmark coordinates
}
\description{
The present function can be used to predict the landmark coordinates of an individual
given a set of morphological variables
}
\section{Details}{

This function uses multivariate linear regression functions to construct a mathematical function
linking a set of morphological variables with landmark coordinates. Using this function,
the algorithm will then predict the landmark coordinates of a specific point in a
given feature space.
}

\examples{
library(geomorph)
library(shapes)
library(GraphGMM)

# 2D example --------------------------------------

# load data
data(apes)

# Generalized Procrustes Fit
GPAshape <- GPA(apes$x)

# calculate central configuration
central_config <- calc_central_morph(GPAshape$rotated)

# compute graph edges
edges <- triangulate2d(central_config)

# extract edge list
edge_list <- as_edge_list(edges)

# create graph embeddings
graph_object <- graph_embeddings(GPAshape$rotated, edge_list,
                                 num_convolutions = 2)

pca <- pca_plot(graph_object$similarity_vector, apes$group)

pca$pca_plot # visualise pca_plot

# visualise pc1 extremities

tps_visualisation(GPAshape$rotated, pca$pc_scores, pcscore = 1,
                  pccoord = max(pca$pc_scores[,1]), type = "graph",
                  edges = edges)
tps_visualisation(GPAshape$rotated, pca$pc_scores, pcscore = 1,
                  pccoord = min(pca$pc_scores[,1]), type = "graph",
                  edges = edges)

# visualise pc2 extremities

tps_visualisation(GPAshape$rotated, pca$pc_scores, pcscore = 2,
                  pccoord = max(pca$pc_scores[,2]), type = "graph",
                  edges = edges)
tps_visualisation(GPAshape$rotated, pca$pc_scores, pcscore = 2,
                  pccoord = min(pca$pc_scores[,2]), type = "graph",
                  edges = edges)

# warpgrid visualisation

tps_visualisation(GPAshape$rotated, pca$pc_scores, pcscore = 1,
                  pccoord = max(pca$pc_scores[,1]), type = "warpgrid",
                  reference_shape = central_config)
tps_visualisation(GPAshape$rotated, pca$pc_scores, pcscore = 1,
                  pccoord = min(pca$pc_scores[,1]), type = "warpgrid",
                  reference_shape = central_config)

# 3D example --------------------------------------

data(macf.dat)

# Generalized Procrustes Fit
GPAshape <- GPA(macf.dat)

# calculate central configuration
central_config <- calc_central_morph(GPAshape$rotated)

# compute graph edges
edges <- triangulate3d(central_config)

# extract edge list
edge_list <- as_edge_list(edges)

# create graph embeddings
graph_object <- graph_embeddings(GPAshape$rotated, edge_list,
                                 num_convolutions = 2)

pca <- pca_plot(graph_object$similarity_vector)

pca$pca_plot # visualise pca_plot

# visualise pc1 extremities

tps_visualisation(GPAshape$rotated, pca$pc_scores, pcscore = 1,
                  pccoord = max(pca$pc_scores[,1]), type = "surface")
tps_visualisation(GPAshape$rotated, pca$pc_scores, pcscore = 1,
                  pccoord = min(pca$pc_scores[,1]), type = "surface")

tps_visualisation(GPAshape$rotated, pca$pc_scores, pcscore = 1,
                  pccoord = max(pca$pc_scores[,1]), type = "graph",
                  edges = edges)
tps_visualisation(GPAshape$rotated, pca$pc_scores, pcscore = 1,
                  pccoord = min(pca$pc_scores[,1]), type = "graph",
                  edges = edges)

}
\seealso{
\code{tps_visualisation}
}
